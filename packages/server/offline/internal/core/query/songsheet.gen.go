// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zzopen/music/server/offline/internal/core/model"
)

func newSongsheet(db *gorm.DB, opts ...gen.DOOption) songsheet {
	_songsheet := songsheet{}

	_songsheet.songsheetDo.UseDB(db, opts...)
	_songsheet.songsheetDo.UseModel(&model.Songsheet{})

	tableName := _songsheet.songsheetDo.TableName()
	_songsheet.ALL = field.NewAsterisk(tableName)
	_songsheet.ID = field.NewUint64(tableName, "id")
	_songsheet.Creater = field.NewString(tableName, "creater")
	_songsheet.Updater = field.NewString(tableName, "updater")
	_songsheet.CreatedAt = field.NewField(tableName, "created_at")
	_songsheet.UpdatedAt = field.NewField(tableName, "updated_at")
	_songsheet.DataUpdatedAt = field.NewField(tableName, "data_updated_at")
	_songsheet.Name = field.NewString(tableName, "name")

	_songsheet.fillFieldMap()

	return _songsheet
}

type songsheet struct {
	songsheetDo

	ALL           field.Asterisk
	ID            field.Uint64
	Creater       field.String
	Updater       field.String
	CreatedAt     field.Field
	UpdatedAt     field.Field
	DataUpdatedAt field.Field
	Name          field.String

	fieldMap map[string]field.Expr
}

func (s songsheet) Table(newTableName string) *songsheet {
	s.songsheetDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s songsheet) As(alias string) *songsheet {
	s.songsheetDo.DO = *(s.songsheetDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *songsheet) updateTableName(table string) *songsheet {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Creater = field.NewString(table, "creater")
	s.Updater = field.NewString(table, "updater")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.DataUpdatedAt = field.NewField(table, "data_updated_at")
	s.Name = field.NewString(table, "name")

	s.fillFieldMap()

	return s
}

func (s *songsheet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *songsheet) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["creater"] = s.Creater
	s.fieldMap["updater"] = s.Updater
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["data_updated_at"] = s.DataUpdatedAt
	s.fieldMap["name"] = s.Name
}

func (s songsheet) clone(db *gorm.DB) songsheet {
	s.songsheetDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s songsheet) replaceDB(db *gorm.DB) songsheet {
	s.songsheetDo.ReplaceDB(db)
	return s
}

type songsheetDo struct{ gen.DO }

type ISongsheetDo interface {
	gen.SubQuery
	Debug() ISongsheetDo
	WithContext(ctx context.Context) ISongsheetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISongsheetDo
	WriteDB() ISongsheetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISongsheetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISongsheetDo
	Not(conds ...gen.Condition) ISongsheetDo
	Or(conds ...gen.Condition) ISongsheetDo
	Select(conds ...field.Expr) ISongsheetDo
	Where(conds ...gen.Condition) ISongsheetDo
	Order(conds ...field.Expr) ISongsheetDo
	Distinct(cols ...field.Expr) ISongsheetDo
	Omit(cols ...field.Expr) ISongsheetDo
	Join(table schema.Tabler, on ...field.Expr) ISongsheetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISongsheetDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISongsheetDo
	Group(cols ...field.Expr) ISongsheetDo
	Having(conds ...gen.Condition) ISongsheetDo
	Limit(limit int) ISongsheetDo
	Offset(offset int) ISongsheetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsheetDo
	Unscoped() ISongsheetDo
	Create(values ...*model.Songsheet) error
	CreateInBatches(values []*model.Songsheet, batchSize int) error
	Save(values ...*model.Songsheet) error
	First() (*model.Songsheet, error)
	Take() (*model.Songsheet, error)
	Last() (*model.Songsheet, error)
	Find() ([]*model.Songsheet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songsheet, err error)
	FindInBatches(result *[]*model.Songsheet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Songsheet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISongsheetDo
	Assign(attrs ...field.AssignExpr) ISongsheetDo
	Joins(fields ...field.RelationField) ISongsheetDo
	Preload(fields ...field.RelationField) ISongsheetDo
	FirstOrInit() (*model.Songsheet, error)
	FirstOrCreate() (*model.Songsheet, error)
	FindByPage(offset int, limit int) (result []*model.Songsheet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISongsheetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.Songsheet, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (s songsheetDo) FilterWithNameAndRole(name string, role string) (result []model.Songsheet, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM songsheet WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s songsheetDo) Debug() ISongsheetDo {
	return s.withDO(s.DO.Debug())
}

func (s songsheetDo) WithContext(ctx context.Context) ISongsheetDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s songsheetDo) ReadDB() ISongsheetDo {
	return s.Clauses(dbresolver.Read)
}

func (s songsheetDo) WriteDB() ISongsheetDo {
	return s.Clauses(dbresolver.Write)
}

func (s songsheetDo) Session(config *gorm.Session) ISongsheetDo {
	return s.withDO(s.DO.Session(config))
}

func (s songsheetDo) Clauses(conds ...clause.Expression) ISongsheetDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s songsheetDo) Returning(value interface{}, columns ...string) ISongsheetDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s songsheetDo) Not(conds ...gen.Condition) ISongsheetDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s songsheetDo) Or(conds ...gen.Condition) ISongsheetDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s songsheetDo) Select(conds ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s songsheetDo) Where(conds ...gen.Condition) ISongsheetDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s songsheetDo) Order(conds ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s songsheetDo) Distinct(cols ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s songsheetDo) Omit(cols ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s songsheetDo) Join(table schema.Tabler, on ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s songsheetDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s songsheetDo) RightJoin(table schema.Tabler, on ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s songsheetDo) Group(cols ...field.Expr) ISongsheetDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s songsheetDo) Having(conds ...gen.Condition) ISongsheetDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s songsheetDo) Limit(limit int) ISongsheetDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s songsheetDo) Offset(offset int) ISongsheetDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s songsheetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsheetDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s songsheetDo) Unscoped() ISongsheetDo {
	return s.withDO(s.DO.Unscoped())
}

func (s songsheetDo) Create(values ...*model.Songsheet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s songsheetDo) CreateInBatches(values []*model.Songsheet, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s songsheetDo) Save(values ...*model.Songsheet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s songsheetDo) First() (*model.Songsheet, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songsheet), nil
	}
}

func (s songsheetDo) Take() (*model.Songsheet, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songsheet), nil
	}
}

func (s songsheetDo) Last() (*model.Songsheet, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songsheet), nil
	}
}

func (s songsheetDo) Find() ([]*model.Songsheet, error) {
	result, err := s.DO.Find()
	return result.([]*model.Songsheet), err
}

func (s songsheetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songsheet, err error) {
	buf := make([]*model.Songsheet, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s songsheetDo) FindInBatches(result *[]*model.Songsheet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s songsheetDo) Attrs(attrs ...field.AssignExpr) ISongsheetDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s songsheetDo) Assign(attrs ...field.AssignExpr) ISongsheetDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s songsheetDo) Joins(fields ...field.RelationField) ISongsheetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s songsheetDo) Preload(fields ...field.RelationField) ISongsheetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s songsheetDo) FirstOrInit() (*model.Songsheet, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songsheet), nil
	}
}

func (s songsheetDo) FirstOrCreate() (*model.Songsheet, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songsheet), nil
	}
}

func (s songsheetDo) FindByPage(offset int, limit int) (result []*model.Songsheet, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s songsheetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s songsheetDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s songsheetDo) Delete(models ...*model.Songsheet) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *songsheetDo) withDO(do gen.Dao) *songsheetDo {
	s.DO = *do.(*gen.DO)
	return s
}
